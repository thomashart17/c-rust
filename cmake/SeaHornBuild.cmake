# Create a target to generate Rust to C bindings using cbindgen
function(generate_c_bindings TARGET RUSTLIB)
endfunction()

# Generate target to compile C files, link with Rust library, and produce LLVM IR
# The Rust library is expected to be called ${TARGET}-lib
function(c_rust_llvm TARGET SRC_FILES)
    # XXX all Rust libraries are loaded together from the workspace
    # corrosion_import_crate(MANIFEST_PATH ${CMAKE_CURRENT_SOURCE_DIR}/Cargo.toml)

    set(RUST_LIB_TARGET ${TARGET}-lib)

    # build std library; require panic to abort without printing anything
    corrosion_set_cargo_flags(${RUST_LIB_TARGET}	
				 "-Zbuild-std=panic_abort,std" 
				 "-Zbuild-std-features=panic_immediate_abort")
    # generate Rust to C bindings
    add_custom_command(
		    OUTPUT inc/lib.h
		    COMMAND cbindgen ARGS --config ${CBINDGEN_TOML} --output ${CMAKE_CURRENT_BINARY_DIR}/inc/lib.h
		    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		    DEPENDS ${RUST_LIB_TARGET}
		    COMMENT "Generating C bindings for rust code for target ${TARGET}"
		    )

    add_custom_target(${TARGET}-cbindgen DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/inc/lib.h)

    add_executable(${TARGET} ${SRC_FILES})
    add_dependencies(${TARGET} ${TARGET}-cbindgen)
    # include path for header files generated by cbindgen
    target_include_directories(${TARGET} PUBLIC ${CMAKE_CURRENT_BINARY_DIR}) 

    set(ARCH x86_64-unknown-linux-gnu)
    # compile C files with LTO 
    # do not perform optimizations, but do not add optnone marker in LLVM IR
    # target is set to linux, this might not be required
    target_compile_options(${TARGET} PUBLIC 
        -flto
        -O1
        -Xclang -disable-llvm-optzns
        --target=${ARCH}
    )

    # link rust into C
    # Rust library is expected to link all other libraries it uses
    target_link_libraries(${TARGET} ${RUST_LIB_TARGET})
    # link seahorn intrinsics
    target_link_libraries(${TARGET} sea-lib.LIB)


    # LTO during linking
    # Embed bitcode prior to optimization
    # Still do optimization for the executable (XXX is this needed?)
    target_link_options(${TARGET} PUBLIC
        -flto
        -fuse-ld=lld
        -Wl,--plugin-opt=-lto-embed-bitcode=post-merge-pre-opt
        --target=${ARCH}
        -O1
    )

    SET(BC_FILE ${TARGET}_llvm.bc)

    add_custom_command(
        OUTPUT ${TARGET}-bc
        COMMAND ${LLVM_OBJCOPY} ARGS ${CMAKE_CURRENT_BINARY_DIR}/${TARGET} --dump-section .llvmbc=${BC_FILE}
        DEPENDS ${TARGET}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Copying llvm bitcode sections from executable for ${TARGET}"
    )

    add_custom_command(
        OUTPUT ${TARGET}-llvm
        COMMAND ${LLVM_DIS} ARGS ${CMAKE_CURRENT_BINARY_DIR}/${BC_FILE}
        DEPENDS ${TARGET}-bc
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Outputting disassembled program post merge pre opt llvm code for ${TARGET}"
    )

    add_custom_target(${TARGET}.ir ALL DEPENDS ${TARGET}-llvm)
    
    set_target_properties(${TARGET}.ir PROPERTIES
        LLVMIR_DIR ${CMAKE_CURRENT_BINARY_DIR}
        LLVMIR_FILES ${BC_FILE}
    )
endfunction()

function(sea_get_file_name VAR LLVMIR_TARGET)
  get_property(DIR TARGET ${LLVMIR_TARGET} PROPERTY LLVMIR_DIR)
  get_property(FILES TARGET ${LLVMIR_TARGET} PROPERTY LLVMIR_FILES)
  set(${VAR} "${DIR}/${FILES}" PARENT_SCOPE)
endfunction()

# Run unit proof, expecting unsat
function(sea_add_unsat_test TARGET)
  sea_get_file_name(BC ${TARGET}.ir)
  add_test(NAME "${TARGET}_unsat_test" COMMAND ${VERIFY_CMD} ${VERIFY_FLAGS} --expect=unsat ${BC})
endfunction()

# Run unti proof, expecting sat
function(sea_add_sat_test TARGET)
  sea_get_file_name(BC ${TARGET}.ir)
  add_test(NAME "${TARGET}_sat_test" COMMAND ${VERIFY_CMD} ${VERIFY_FLAGS} --expect=sat ${BC})
endfunction()


